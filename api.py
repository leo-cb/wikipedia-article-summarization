from fastapi import FastAPI, HTTPException, Depends, Header
from summarize_t5 import TextSummarization
from summarize_wikipedia import get_wikipedia_text
from starlette.status import HTTP_403_FORBIDDEN
import os
import hashlib

# initialize fast api
app = FastAPI()

# initialize text summarizer
summarizer = TextSummarization()

def get_api_key(api_key_header: str = Header(None)):
    """
    Retrieves the API key from the specified API key header.

    Parameters:
    - api_key_header (str): The API key header to extract the API key from. Defaults to the value returned by the `Header()` function.

    Returns:
    - str: The retrieved API key.

    Raises:
    - HTTPException: If the API key fails to validate, an HTTPException is raised with a status code of 403 (Forbidden) and a detail message indicating the failure.
    """

    if api_key_header is None:
        print("No api_key_header.")
        raise HTTPException(
            status_code=HTTP_403_FORBIDDEN, detail="Could not validate credentials"
        )

    # get api keys
    api_keys = os.getenv("SUMMARIZE_API_KEYS")
    
    if api_keys is not None:
        api_keys = api_keys.split(";")
    else:
        print("No api keys.")
        raise HTTPException(
            status_code=HTTP_403_FORBIDDEN, detail="Could not validate credentials"
        )

    # get salt
    salt = os.getenv("SUMMARIZE_SALT")

    if salt is None:
        raise HTTPException(
            status_code=HTTP_403_FORBIDDEN, detail="Could not validate credentials"
        )
    
    # compare header api key with local api keys
    for api_key in api_keys:
        if hashlib.sha256(salt.encode() + api_key_header.encode()).hexdigest() == api_key:
            return api_key_header

    # if there are no matches, return 403 http code
    raise HTTPException(
        status_code=HTTP_403_FORBIDDEN, detail="Could not validate credentials"
    )

@app.get("/summarize/", dependencies=[Depends(get_api_key)])
async def summarize(url : str,
                    limit : int = None):
    """
    A function that summarizes the given URL by fetching its text from Wikipedia, and then using the TextSummarization class to generate a summary. 

    Params:
    - url (str): The URL of the page to summarize from Wikipedia.
    - limit (int, optional): The maximum number of characters to include in the summary. Defaults to None.

    Returns:
    - str: The summarized text generated by the TextSummarization class.
    """
    text = get_wikipedia_text(url)
    if limit != None:
        text = text[:limit]

    return summarizer.summarize_text_t5(text)